@inject IUserInterface _userInterface
@inject IJSRuntime JSRuntime
@inject ILocalStorageService localStorageService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider
@page "/login"

<div class="min-h-screen flex items-center justify-center bg-gray-100">
    <div class="max-w-md w-full p-6 bg-white rounded-lg shadow-lg">
        <div class="text-center mb-4">
            <img src="https://cdn.pixabay.com/photo/2015/05/15/21/36/finger-769300_1280.jpg" alt="Logo" class="w-16 h-16 mx-auto mb-2 rounded-full">
            <h1 class="text-2xl font-semibold">Log In</h1>
        </div>

        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <div class="mb-4">
                <label for="email" class="block text-gray-600">Email</label>
                <InputText id="email" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline" @bind-Value="loginModel.Email" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>
            <div class="mb-4">
                <label for="password" class="block text-gray-600">Password</label>
                <InputText type="password" id="password" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            <div class="mb-6">
                <button @onclick="HandleLogin" type="submit" class="w-full bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg">Log In</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private LoginRequestDto loginModel = new LoginRequestDto();

    public async Task HandleLogin()
    {
        var res= await _userInterface.login(loginModel);
        var token = res.Result.ToString();

        if(token == null)
        {
            showError();
            return;
        }
        else
        {
            await localStorageService.SetItemAsStringAsync("authToken", token);
            await authenticationStateProvider.GetAuthenticationStateAsync();
            navigationManager.NavigateTo("/");
        }
        AddSuccess();



    }

    private void AddSuccess()
    {
        JSRuntime.InvokeVoidAsync("showAlert", "Logged in successfully", "success");
    }

    private void showError()
    {
        JSRuntime.InvokeVoidAsync("showAlert", "OOOOPs!", "error");
    }

}
